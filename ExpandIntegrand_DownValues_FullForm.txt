List[RuleDelayed[HoldPattern[ExpandIntegrand[Pattern[u, Blank[]], Pattern[v, Blank[]], Pattern[x, Blank[Symbol]]]], Module[List[Set[w, ExpandIntegrand[v, x]], r], CompoundExpression[Set[r, NonfreeTerms[w, x]], If[SumQ[r], Plus[Times[u, FreeTerms[w, x]], Map[Function[MergeMonomials[Times[u, Slot[1]], x]], r]], Plus[Times[u, FreeTerms[w, x]], MergeMonomials[Times[u, r], x]]]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Power[Pattern[f, Blank[]], Times[Optional[Pattern[e, Blank[]]], Power[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]], Optional[Pattern[n, Blank[]]]]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Optional[Pattern[m, Blank[]]]], Power[Plus[Optional[Pattern[g, Blank[]]], Times[Optional[Pattern[h, Blank[]]], Pattern[x, Blank[]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[With[List[Set[tmp, Plus[Times[a, h], Times[-1, b, g]]]], Module[List[k], Plus[Times[SimplifyTerm[Times[Power[tmp, m], Power[Power[h, m], -1]], x], Power[f, Times[e, Power[Plus[c, Times[d, x]], n]]], Power[Plus[g, Times[h, x]], -1]], Sum[Times[SimplifyTerm[Times[b, Power[tmp, Plus[k, -1]], Power[Power[h, k], -1]], x], Power[f, Times[e, Power[Plus[c, Times[d, x]], n]]], Power[Plus[a, Times[b, x]], Plus[m, Times[-1, k]]]], List[k, 1, m]]]]], And[FreeQ[List[a, b, c, d, e, f, g, h], x], PositiveIntegerQ[m], EqQ[Plus[Times[b, c], Times[-1, a, d]], 0]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Power[Pattern[F, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]], Optional[Pattern[n, Blank[]]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Plus[Pattern[e, Blank[]], Times[Optional[Pattern[f, Blank[]]], Pattern[x, Blank[]]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[If[And[PositiveIntegerQ[m, p], LessEqual[m, p], Or[EqQ[n, 1], EqQ[Plus[Times[d, e], Times[-1, c, f]], 0]]], ExpandLinearProduct[Times[Power[Plus[e, Times[f, x]], p], Power[F, Times[b, Power[Plus[c, Times[d, x]], n]]]], Power[x, m], e, f, x], If[PositiveIntegerQ[p], Distribute[Times[Power[x, m], Power[F, Times[b, Power[Plus[c, Times[d, x]], n]]], Expand[Power[Plus[e, Times[f, x]], p], x]], Plus, Times], ExpandIntegrand[Power[F, Times[b, Power[Plus[c, Times[d, x]], n]]], Times[Power[x, m], Power[Plus[e, Times[f, x]], p]], x]]], FreeQ[List[F, b, c, d, e, f, m, n, p], x]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Power[Pattern[F, Blank[]], Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]], Optional[Pattern[n, Blank[]]]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Plus[Pattern[e, Blank[]], Times[Optional[Pattern[f, Blank[]]], Pattern[x, Blank[]]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[If[And[PositiveIntegerQ[m, p], LessEqual[m, p], Or[EqQ[n, 1], EqQ[Plus[Times[d, e], Times[-1, c, f]], 0]]], ExpandLinearProduct[Times[Power[Plus[e, Times[f, x]], p], Power[F, Plus[a, Times[b, Power[Plus[c, Times[d, x]], n]]]]], Power[x, m], e, f, x], If[PositiveIntegerQ[p], Distribute[Times[Power[x, m], Power[F, Plus[a, Times[b, Power[Plus[c, Times[d, x]], n]]]], Expand[Power[Plus[e, Times[f, x]], p], x]], Plus, Times], ExpandIntegrand[Power[F, Plus[a, Times[b, Power[Plus[c, Times[d, x]], n]]]], Times[Power[x, m], Power[Plus[e, Times[f, x]], p]], x]]], FreeQ[List[F, a, b, c, d, e, f, m, n, p], x]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[F, Blank[]], Pattern[v, Blank[]]]]], Optional[Pattern[m, Blank[]]]], Power[Plus[Pattern[c, Blank[]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[F, Blank[]], Pattern[v, Blank[]]]]], Pattern[n, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[With[List[Set[w, ReplaceAll[ExpandIntegrand[Times[Power[Plus[a, Times[b, x]], m], Power[Plus[c, Times[d, x]], n]], x], Rule[x, Power[F, v]]]]], Condition[Map[Function[Times[u, Slot[1]]], w], SumQ[w]]], And[FreeQ[List[F, a, b, c, d], x], IntegersQ[m, n], Less[n, 0]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Power[Pattern[f, Blank[]], Times[Optional[Pattern[e, Blank[]]], Power[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]], Optional[Pattern[n, Blank[]]]]]], Pattern[u, Blank[]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[With[List[Set[v, ExpandIntegrand[Times[u, Power[Plus[a, Times[b, x]], m]], x]]], Condition[Distribute[Times[Power[f, Times[e, Power[Plus[c, Times[d, x]], n]]], v], Plus, Times], SumQ[v]]], And[FreeQ[List[a, b, c, d, e, f, m, n], x], PolynomialQ[u, x]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Log[Times[Optional[Pattern[c, Blank[]]], Power[Plus[Optional[Pattern[d, Blank[]]], Times[Optional[Pattern[e, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]], Optional[Pattern[p, Blank[]]]]]], Pattern[u, Blank[]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[ExpandIntegrand[Log[Times[c, Power[Plus[d, Times[e, Power[x, n]]], p]]], Times[u, Power[Plus[a, Times[b, x]], m]], x], And[FreeQ[List[a, b, c, d, e, m, n, p], x], PolynomialQ[u, x]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Power[Pattern[f, Blank[]], Times[Optional[Pattern[e, Blank[]]], Power[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]], Optional[Pattern[n, Blank[]]]]]], Pattern[u, Blank[]]], Pattern[x, Blank[Symbol]]]], Condition[If[EqQ[n, 1], ExpandIntegrand[Power[f, Times[e, Power[Plus[c, Times[d, x]], n]]], u, x], ExpandLinearProduct[Power[f, Times[e, Power[Plus[c, Times[d, x]], n]]], u, c, d, x]], And[FreeQ[List[c, d, e, f, n], x], PolynomialQ[u, x]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Power[Pattern[F, Blank[]][Pattern[u, Blank[]]], Optional[Pattern[m, Blank[]]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[G, Blank[]][Pattern[u, Blank[]]]]], Optional[Pattern[n, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[ReplaceAll[ExpandIntegrand[Times[Power[Plus[a, Times[b, x]], n], Power[Power[x, m], -1]], x], Rule[x, G[u]]], And[FreeQ[List[a, b], x], IntegersQ[m, n], SameQ[Times[F[u], G[u]], 1]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Power[Plus[Optional[Pattern[a, Blank[]]], Times[Log[Times[Optional[Pattern[c, Blank[]]], Power[Times[Optional[Pattern[d, Blank[]]], Power[Plus[Optional[Pattern[e, Blank[]]], Times[Optional[Pattern[f, Blank[]]], Pattern[x, Blank[]]]], Optional[Pattern[p, Blank[]]]]], Optional[Pattern[q, Blank[]]]]]], Optional[Pattern[b, Blank[]]]]], Pattern[n, Blank[]]], Pattern[u, Blank[]]], Pattern[x, Blank[Symbol]]]], Condition[ExpandLinearProduct[Power[Plus[a, Times[b, Log[Times[c, Power[Times[d, Power[Plus[e, Times[f, x]], p]], q]]]]], n], u, e, f, x], And[FreeQ[List[a, b, c, d, e, f, n, p, q], x], PolynomialQ[u, x]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Pattern[u, Blank[]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[F, Blank[]][Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]]]], Pattern[n, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[ExpandLinearProduct[Power[Plus[a, Times[b, F[Plus[c, Times[d, x]]]]], n], u, c, d, x], And[FreeQ[List[a, b, c, d, n], x], PolynomialQ[u, x], MemberQ[List[ArcSin, ArcCos, ArcSinh, ArcCosh], F]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Pattern[n, Blank[]]]], Times[Optional[Pattern[b, Blank[]]], Power[Plus[Pattern[c, Blank[]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[x, Blank[]], Pattern[j, Blank[]]]]], Rational[1, 2]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[ExpandIntegrand[Times[u, Plus[Times[a, Power[x, n]], Times[-1, b, Sqrt[Plus[c, Times[d, Power[x, Times[2, n]]]]]]], Power[Plus[Times[-1, Power[b, 2], c], Times[Plus[Power[a, 2], Times[-1, Power[b, 2], d]], Power[x, Times[2, n]]]], -1]], x], And[FreeQ[List[a, b, c, d, n], x], EqQ[j, Times[2, n], 0]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Pattern[m, Blank[]]], Power[Plus[Pattern[c, Blank[]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[If[RationalQ[a, b, c, d], ExpandExpression[Times[Power[Plus[a, Times[b, x]], m], Power[Plus[c, Times[d, x]], -1]], x], With[List[Set[tmp, Plus[Times[a, d], Times[-1, b, c]]]], Module[List[k], Plus[Times[SimplifyTerm[Times[Power[tmp, m], Power[Power[d, m], -1]], x], Power[Plus[c, Times[d, x]], -1]], Sum[Times[SimplifyTerm[Times[b, Power[tmp, Plus[k, -1]], Power[Power[d, k], -1]], x], Power[Plus[a, Times[b, x]], Plus[m, Times[-1, k]]]], List[k, 1, m]]]]]], And[FreeQ[List[a, b, c, d], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Optional[Pattern[m, Blank[]]]], Plus[Pattern[A, Blank[]], Times[Optional[Pattern[B, Blank[]]], Pattern[x, Blank[]]]], Power[Plus[Pattern[c, Blank[]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[If[RationalQ[a, b, c, d, A, B], ExpandExpression[Times[Power[Plus[a, Times[b, x]], m], Plus[A, Times[B, x]], Power[Plus[c, Times[d, x]], -1]], x], Module[List[tmp1, tmp2], CompoundExpression[Set[tmp1, Times[Plus[Times[A, d], Times[-1, B, c]], Power[d, -1]]], Set[tmp2, ExpandIntegrand[Times[Power[Plus[a, Times[b, x]], m], Power[Plus[c, Times[d, x]], -1]], x]], Set[tmp2, If[SumQ[tmp2], Map[Function[SimplifyTerm[Times[tmp1, Slot[1]], x]], tmp2], SimplifyTerm[Times[tmp1, tmp2], x]]], Plus[Times[SimplifyTerm[Times[B, Power[d, -1]], x], Power[Plus[a, Times[b, x]], m]], tmp2]]]], And[FreeQ[List[a, b, c, d, A, B], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Pattern[u, Blank[]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[tmp1, tmp2], CompoundExpression[Set[tmp1, ExpandLinearProduct[Power[Plus[a, Times[b, x]], m], u, a, b, x]], If[Not[IntegerQ[m]], tmp1, CompoundExpression[Set[tmp2, ExpandExpression[Times[u, Power[Plus[a, Times[b, x]], m]], x]], If[And[SumQ[tmp2], LessEqual[LeafCount[tmp2], Plus[LeafCount[tmp1], 2]]], tmp2, tmp1]]]]], And[FreeQ[List[a, b, m], x], PolynomialQ[u, x], Not[And[PositiveIntegerQ[m], MatchQ[u, Condition[Times[Optional[Pattern[w, Blank[]]], Power[Plus[Pattern[c, Blank[]], Times[Optional[Pattern[d, Blank[]]], x]], Pattern[p, Blank[]]]], And[FreeQ[List[c, d], x], IntegerQ[p], Greater[p, m]]]]]]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Pattern[u, Blank[]], Power[Pattern[v, Blank[]], Pattern[n, Blank[]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Function[Plus[ExpandIntegrand[Times[Part[Slot[1], 1], Power[Plus[a, Times[b, x]], FractionalPart[m]]], x], ExpandIntegrand[Times[Part[Slot[1], 2], Power[v, n], Power[Plus[a, Times[b, x]], m]], x]]][PolynomialQuotientRemainder[u, Times[Power[v, Times[-1, n]], Power[Plus[a, Times[b, x]], Times[-1, IntegerPart[m]]]], x]], And[FreeQ[List[a, b, m], x], NegativeIntegerQ[n], Not[IntegerQ[m]], PolynomialQ[u, x], PolynomialQ[v, x], RationalQ[m], Less[m, -1], GreaterEqual[Exponent[u, x], Times[-1, Plus[n, IntegerPart[m]], Exponent[v, x]]]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Pattern[u, Blank[]], Power[Pattern[v, Blank[]], Pattern[n, Blank[]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Function[Plus[ExpandIntegrand[Times[Part[Slot[1], 1], Power[Plus[a, Times[b, x]], m]], x], ExpandIntegrand[Times[Part[Slot[1], 2], Power[v, n], Power[Plus[a, Times[b, x]], m]], x]]][PolynomialQuotientRemainder[u, Power[v, Times[-1, n]], x]], And[FreeQ[List[a, b, m], x], NegativeIntegerQ[n], Not[IntegerQ[m]], PolynomialQ[u, x], PolynomialQ[v, x], GreaterEqual[Exponent[u, x], Times[-1, n, Exponent[v, x]]]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[u, Blank[]], Pattern[n, Blank[]]]]], -1], Pattern[x, Blank[Symbol]]]], Condition[With[List[Set[r, Numerator[Rt[Times[-1, a, Power[b, -1]], 2]]], Set[s, Denominator[Rt[Times[-1, a, Power[b, -1]], 2]]]], Plus[Times[r, Power[Times[2, a, Plus[r, Times[-1, s, Power[u, Times[n, Power[2, -1]]]]]], -1]], Times[r, Power[Times[2, a, Plus[r, Times[s, Power[u, Times[n, Power[2, -1]]]]]], -1]]]], And[FreeQ[List[a, b], x], PositiveIntegerQ[Times[n, Power[4, -1]]]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[u, Blank[]], Pattern[n, Blank[]]]]], -1], Pattern[x, Blank[Symbol]]]], Condition[With[List[Set[r, Numerator[Rt[Times[-1, a, Power[b, -1]], n]]], Set[s, Denominator[Rt[Times[-1, a, Power[b, -1]], n]]]], Module[List[k], Sum[Times[r, Power[Times[a, n, Plus[r, Times[-1, Power[-1, Times[2, k, Power[n, -1]]], s, u]]], -1]], List[k, 1, n]]]], And[FreeQ[List[a, b], x], IntegerQ[n], Greater[n, 1]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Plus[Pattern[c, Blank[]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[u, Blank[]], Optional[Pattern[m, Blank[]]]]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[u, Blank[]], Pattern[n, Blank[]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[With[List[Set[r, Numerator[Rt[Times[-1, a, Power[b, -1]], n]]], Set[s, Denominator[Rt[Times[-1, a, Power[b, -1]], n]]]], Module[List[k], Sum[Times[Plus[Times[r, c], Times[r, d, Power[Times[r, Power[s, -1]], m], Power[-1, Times[-2, k, m, Power[n, -1]]]]], Power[Times[a, n, Plus[r, Times[-1, Power[-1, Times[2, k, Power[n, -1]]], s, u]]], -1]], List[k, 1, n]]]], And[FreeQ[List[a, b, c, d], x], IntegersQ[m, n], Less[0, m, n]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[u, Blank[]], Pattern[n, Blank[]]]]], -1], Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[u, Blank[]], Optional[Pattern[m, Blank[]]]]], Times[Optional[Pattern[e, Blank[]]], Power[Pattern[u, Blank[]], Pattern[p, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[With[List[Set[r, Numerator[Rt[Times[-1, a, Power[b, -1]], n]]], Set[s, Denominator[Rt[Times[-1, a, Power[b, -1]], n]]]], Module[List[k], Sum[Times[Plus[Times[r, c], Times[r, d, Power[Times[r, Power[s, -1]], m], Power[-1, Times[-2, k, m, Power[n, -1]]]], Times[r, e, Power[Times[r, Power[s, -1]], p], Power[-1, Times[-2, k, p, Power[n, -1]]]]], Power[Times[a, n, Plus[r, Times[-1, Power[-1, Times[2, k, Power[n, -1]]], s, u]]], -1]], List[k, 1, n]]]], And[FreeQ[List[a, b, c, d, e], x], IntegersQ[m, n, p], Less[0, m, p, n]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[u, Blank[]], Pattern[n, Blank[]]]]], -1], Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[u, Blank[]], Optional[Pattern[m, Blank[]]]]], Times[Optional[Pattern[e, Blank[]]], Power[Pattern[u, Blank[]], Pattern[p, Blank[]]]], Times[Optional[Pattern[f, Blank[]]], Power[Pattern[u, Blank[]], Pattern[q, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[With[List[Set[r, Numerator[Rt[Times[-1, a, Power[b, -1]], n]]], Set[s, Denominator[Rt[Times[-1, a, Power[b, -1]], n]]]], Module[List[k], Sum[Times[Plus[Times[r, c], Times[r, d, Power[Times[r, Power[s, -1]], m], Power[-1, Times[-2, k, m, Power[n, -1]]]], Times[r, e, Power[Times[r, Power[s, -1]], p], Power[-1, Times[-2, k, p, Power[n, -1]]]], Times[r, f, Power[Times[r, Power[s, -1]], q], Power[-1, Times[-2, k, q, Power[n, -1]]]]], Power[Times[a, n, Plus[r, Times[-1, Power[-1, Times[2, k, Power[n, -1]]], s, u]]], -1]], List[k, 1, n]]]], And[FreeQ[List[a, b, c, d, e, f], x], IntegersQ[m, n, p, q], Less[0, m, p, q, n]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[u, Blank[]], Optional[Pattern[n, Blank[]]]]]], Pattern[p, Blank[]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[q], ReplaceAll[ExpandIntegrand[Times[1, Power[Power[c, p], -1]], Times[Power[Plus[Times[-1, q], Times[c, x]], p], Power[Plus[q, Times[c, x]], p]], x], List[Rule[q, Rt[Times[-1, a, c], 2]], Rule[x, Power[u, Times[n, Power[2, -1]]]]]]], And[FreeQ[List[a, c], x], IntegerQ[Times[n, Power[2, -1]]], NegativeIntegerQ[p]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Power[Pattern[u, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[u, Blank[]], Optional[Pattern[n, Blank[]]]]]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[q], ReplaceAll[ExpandIntegrand[Times[1, Power[Power[c, p], -1]], Times[Power[x, m], Power[Plus[Times[-1, q], Times[c, Power[x, Times[n, Power[2, -1]]]]], p], Power[Plus[q, Times[c, Power[x, Times[n, Power[2, -1]]]]], p]], x], List[Rule[q, Rt[Times[-1, a, c], 2]], Rule[x, u]]]], And[FreeQ[List[a, c], x], IntegersQ[m, Times[n, Power[2, -1]]], NegativeIntegerQ[p], Less[0, m, n], Unequal[m, Times[n, Power[2, -1]]]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[u, Blank[]], Optional[Pattern[j, Blank[]]]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[u, Blank[]], Optional[Pattern[n, Blank[]]]]]], Pattern[p, Blank[]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[q], ReplaceAll[ExpandIntegrand[Times[1, Power[Times[Power[4, p], Power[c, p]], -1]], Times[Power[Plus[b, Times[-1, q], Times[2, c, x]], p], Power[Plus[b, q, Times[2, c, x]], p]], x], List[Rule[q, Rt[Plus[Power[b, 2], Times[-1, 4, a, c]], 2]], Rule[x, Power[u, n]]]]], And[FreeQ[List[a, b, c], x], IntegerQ[n], EqQ[j, Times[2, n]], NegativeIntegerQ[p], NeQ[Plus[Power[b, 2], Times[-1, 4, a, c]], 0]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Power[Pattern[u, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[u, Blank[]], Optional[Pattern[j, Blank[]]]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[u, Blank[]], Optional[Pattern[n, Blank[]]]]]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[q], ReplaceAll[ExpandIntegrand[Times[1, Power[Times[Power[4, p], Power[c, p]], -1]], Times[Power[x, m], Power[Plus[b, Times[-1, q], Times[2, c, Power[x, n]]], p], Power[Plus[b, q, Times[2, c, Power[x, n]]], p]], x], List[Rule[q, Rt[Plus[Power[b, 2], Times[-1, 4, a, c]], 2]], Rule[x, u]]]], And[FreeQ[List[a, b, c], x], IntegersQ[m, n, j], EqQ[j, Times[2, n]], NegativeIntegerQ[p], Less[0, m, Times[2, n]], Not[And[Equal[m, n], Equal[p, -1]]], NeQ[Plus[Power[b, 2], Times[-1, 4, a, c]], 0]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[u, Blank[]], Optional[Pattern[j, Blank[]]]]]], -1], Plus[Pattern[c, Blank[]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[u, Blank[]], Optional[Pattern[n, Blank[]]]]]]], Pattern[x, Blank[Symbol]]]], Condition[With[List[Set[q, Rt[Times[-1, a, Power[b, -1]], 2]]], Plus[Times[-1, Plus[c, Times[-1, d, q]], Power[Times[2, b, q, Plus[q, Power[u, n]]], -1]], Times[-1, Plus[c, Times[d, q]], Power[Times[2, b, q, Plus[q, Times[-1, Power[u, n]]]], -1]]]], And[FreeQ[List[a, b, c, d, n], x], EqQ[j, Times[2, n]]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[u, Blank[]], Optional[Pattern[j, Blank[]]]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[u, Blank[]], Optional[Pattern[n, Blank[]]]]]], -1], Plus[Optional[Pattern[d, Blank[]]], Times[Optional[Pattern[e, Blank[]]], Plus[Optional[Pattern[f, Blank[]]], Times[Optional[Pattern[g, Blank[]]], Power[Pattern[u, Blank[]], Optional[Pattern[n, Blank[]]]]]]]]], Pattern[x, Blank[Symbol]]]], Condition[With[List[Set[q, Rt[Plus[Power[b, 2], Times[-1, 4, a, c]], 2]]], With[List[Set[r, TogetherSimplify[Times[Plus[Times[2, c, Plus[d, Times[e, f]]], Times[-1, b, e, g]], Power[q, -1]]]]], Plus[Times[Plus[Times[e, g], r], Power[Plus[b, Times[-1, q], Times[2, c, Power[u, n]]], -1]], Times[Plus[Times[e, g], Times[-1, r]], Power[Plus[b, q, Times[2, c, Power[u, n]]], -1]]]]], And[FreeQ[List[a, b, c, d, e, f, g, n], x], EqQ[j, Times[2, n]], NeQ[Plus[Power[b, 2], Times[-1, 4, a, c]], 0]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Pattern[u, Blank[]], Power[Pattern[v, Blank[]], -1]], Pattern[x, Blank[Symbol]]]], Condition[PolynomialDivide[u, v, x], And[PolynomialQ[u, x], PolynomialQ[v, x], GreaterEqual[Exponent[u, x], Exponent[v, x]]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Pattern[u, Blank[]], Power[Times[Optional[Pattern[a, Blank[]]], Pattern[x, Blank[]]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[ExpandToSum[Power[Times[a, x], p], u, x], And[Not[IntegerQ[p]], PolynomialQ[u, x]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Optional[Pattern[u, Blank[]]], Power[Pattern[v, Blank[]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[ExpandIntegrand[NormalizeIntegrand[Power[v, p], x], u, x], Not[IntegerQ[p]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Pattern[u, Blank[]], Pattern[x, Blank[Symbol]]]], With[List[Set[v, ExpandExpression[u, x]]], Condition[v, SumQ[v]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Times[Power[Pattern[u, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[u, Blank[]], Pattern[n, Blank[]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[ExpandBinomial[a, b, m, n, u, x], And[FreeQ[List[a, b], x], IntegersQ[m, n], Less[0, m, n]]]], RuleDelayed[HoldPattern[ExpandIntegrand[Pattern[u, Blank[]], Pattern[x, Blank[Symbol]]]], u]]